# -*- coding: utf-8 -*-
"""Generator.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XOl3moj1iP2tCQ2rSdhQZKU1eWGWRLun
"""

import torch
from torch import nn
from timeit import default_timer as timer
from PIL import Image
from torchvision.utils import save_image
from torchvision.transforms import transforms

def print_train_time(start: float, end: float, device: torch.device):
    """
    Print difference between start and end time
    :param start:
    :param end:
    :param device:
    :return: float: time between start and end in seconds (higher is longer)
    """
    total_time = end - start
    print(f"Train time on {device}: {total_time:.3f} seconds")
    return total_time

"""# Blocks define"""

class UNetDownBlock(nn.Module):
    def __init__(self, in_channels, out_channels, norm=True, dropout=False):
        super().__init__()
        layers = [nn.Conv2d(in_channels, out_channels, kernel_size=4, stride=1, padding=1, bias=False)]
        if norm:
            layers.append(nn.BatchNorm2d(out_channels))
        layers.append(nn.LeakyReLU(0.2))
        if dropout:
            layers.append(nn.Dropout(0.5))
        self.block = nn.Sequential(*layers)

    def forward(self, x):
        return self.block(x)

class UNetUpBlock(nn.Module):
    def __init__(self, in_channels, out_channels, dropout=False):
        super().__init__()
        layers = [nn.ConvTranspose2d(in_channels, out_channels, kernel_size=4, stride=1, padding=1, bias=False),
                  nn.BatchNorm2d(out_channels),
                  nn.ReLU()]
        if dropout:
            layers.append(nn.Dropout(0.5))
        self.block = nn.Sequential(*layers)

    def forward(self, x, skip_input):
        x = self.block(x)
        return torch.cat([x, skip_input], dim=1)

"""# Generator define"""

class Generator(nn.Module):
    def __init__(self, in_channels=3, out_channels=3):
        super().__init__()
        self.down1 = UNetDownBlock(in_channels, 64, norm=False)
        self.down2 = UNetDownBlock(64, 128)
        self.down3 = UNetDownBlock(128, 256)
        self.down4 = UNetDownBlock(256, 512)
        self.down5 = UNetDownBlock(512, 512)
        self.down6 = UNetDownBlock(512, 512)
        self.down7 = UNetDownBlock(512, 512)
        self.down8 = UNetDownBlock(512, 512, norm=False, dropout=True)
        self.up1 = UNetUpBlock(512, 512, dropout=True)
        self.up2 = UNetUpBlock(1024, 512, dropout=True)
        self.up3 = UNetUpBlock(1024, 512, dropout=True)
        self.up4 = UNetUpBlock(1024, 512, dropout=True)
        self.up5 = UNetUpBlock(1024, 256)
        self.up6 = UNetUpBlock(512, 128)
        self.up7 = UNetUpBlock(256, 64)
        self.final = nn.Sequential(
            nn.Upsample(scale_factor=2),
            nn.ZeroPad2d((1, 0, 1, 0)),
            nn.Conv2d(128, out_channels, 4, padding=1),
            nn.Tanh(),
        )

    def forward(self, x):
        d1 = self.down1(x)
        d2 = self.down2(d1)
        d3 = self.down3(d2)
        d4 = self.down4(d3)
        d5 = self.down5(d4)
        d6 = self.down6(d5)
        d7 = self.down7(d6)
        d8 = self.down8(d7)
        u1 = self.up1(d8, d7)
        u2 = self.up2(u1, d6)
        u3 = self.up3(u2, d5)
        u4 = self.up4(u3, d4)
        u5 = self.up5(u4, d3)
        u6 = self.up6(u5, d2)
        u7 = self.up7(u6, d1)
        return self.final(u7)

"""# Try things with the generator

"""

device = "cuda" if torch.cuda.is_available() else "cpu"
device

gen = Generator().to(device)

save_path = "./flower_0054_sketch.jpg"



